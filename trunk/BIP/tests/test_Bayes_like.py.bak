import unittest

class TestCategor(unittest.TestCase):
    def test_categor(self):
        # self.assertEqual(expected, Categor(x, hist))
        assert False # TODO: implement your test here

class TestNormal(unittest.TestCase):
    def test_normal(self):
        # self.assertEqual(expected, Normal(x, mu, tau))
        assert False # TODO: implement your test here

class TestLognormal(unittest.TestCase):
    def test_lognormal(self):
        # self.assertEqual(expected, Lognormal(x, mu, tau))
        assert False # TODO: implement your test here

class TestPoisson(unittest.TestCase):
    def test_poisson(self):
        # self.assertEqual(expected, Poisson(x, mu))
        assert False # TODO: implement your test here

class TestNegbin(unittest.TestCase):
    def test_negbin(self):
        # self.assertEqual(expected, Negbin(x, r, p))
        assert False # TODO: implement your test here

class TestBinomial(unittest.TestCase):
    def test_binomial(self):
        # self.assertEqual(expected, Binomial(x, n, p))
        assert False # TODO: implement your test here

class TestWeibull(unittest.TestCase):
    def test_weibull(self):
        # self.assertEqual(expected, Weibull(x, alpha, beta))
        assert False # TODO: implement your test here

class TestBernoulli(unittest.TestCase):
    def test_bernoulli(self):
        # self.assertEqual(expected, Bernoulli(x, p))
        assert False # TODO: implement your test here

class TestGamma(unittest.TestCase):
    def test_gamma(self):
        # self.assertEqual(expected, Gamma(x, alpha, beta))
        assert False # TODO: implement your test here

class TestBeta(unittest.TestCase):
    def test_beta(self):
        # self.assertEqual(expected, Beta(x, a, b))
        assert False # TODO: implement your test here

class TestSimple(unittest.TestCase):
    def test_simple(self):
        # self.assertEqual(expected, Simple(x, w, a, start))
        assert False # TODO: implement your test here

if __name__ == '__main__':
    unittest.main()
